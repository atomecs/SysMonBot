import os
import psutil
import socket
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

TOKEN = "7891024666:AAEAmgg2RVeLGh4PurF7byANFKXW-904_08"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
   await update.message.reply_text(
        "üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä Alt Linux</b> üñ•Ô∏è\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "/fullstatus - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "/processes - –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU/RAM\n"
        "/disks - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö\n"
        "/network - –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–∞—Ç—É—Å'",
        parse_mode='HTML'
    )

def get_short_status():
    cpu = psutil.cpu_percent(interval=1)
    mem = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    
    return (
        f"üìä <b>–ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üñ• CPU: {cpu}%\n"
        f"üß† RAM: {mem.percent}% ({mem.used/1024**3:.1f}GB/{mem.total/1024**3:.1f}GB)\n"
        f"üíæ –î–∏—Å–∫: {disk.percent}% ({disk.used/1024**3:.1f}GB/{disk.total/1024**3:.1f}GB)\n"
        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - boot_time}\n"
    )

def get_full_status():
    # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    cpu_info = psutil.cpu_freq()
    cpu_cores = f"{psutil.cpu_count(logical=False)} —è–¥–µ—Ä, {psutil.cpu_count(logical=True)} –ø–æ—Ç–æ–∫–æ–≤"
    
    # –ü–∞–º—è—Ç—å
    mem = psutil.virtual_memory()
    swap = psutil.swap_memory()
    
    # –î–∏—Å–∫–∏
    disks = []
    for part in psutil.disk_partitions(all=False):
        usage = psutil.disk_usage(part.mountpoint)
        disks.append(
            f"üìå {part.device} ({part.fstype}) -> {part.mountpoint}\n"
            f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage.percent}% ({usage.used/1024**3:.1f}GB/{usage.total/1024**3:.1f}GB)"
        )
    
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    try:
        temps = psutil.sensors_temperatures()
        temp_info = "\n".join([f"üå° {name}: {current}¬∞C" for name, current in temps.get('coretemp', [])])
    except:
        temp_info = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    # –°–µ—Ç—å
    hostname = socket.gethostname()
    ip_address = socket.gethostbyname(hostname)
    net_io = psutil.net_io_counters()
    
    return (
        f"üîç <b>–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
        f"<b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b>\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {psutil.cpu_percent(interval=1)}%\n"
        f"–ß–∞—Å—Ç–æ—Ç–∞: {cpu_info.current:.0f}MHz (–º–∞–∫—Å: {cpu_info.max:.0f}MHz)\n"
        f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {cpu_cores}\n\n"
        
        f"<b>–ü–∞–º—è—Ç—å:</b>\n"
        f"–û–ó–£: {mem.percent}% ({mem.used/1024**3:.1f}GB/{mem.total/1024**3:.1f}GB)\n"
        f"Swap: {swap.percent}% ({swap.used/1024**3:.1f}GB/{swap.total/1024**3:.1f}GB)\n\n"
        
        f"<b>–î–∏—Å–∫–∏:</b>\n" + "\n".join(disks) + "\n\n"
        
        f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b>\n{temp_info}\n\n"
        
        f"<b>–°–µ—Ç—å:</b>\n"
        f"–•–æ—Å—Ç: {hostname}\n"
        f"IP: {ip_address}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_io.bytes_sent/1024**2:.1f}MB\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ: {net_io.bytes_recv/1024**2:.1f}MB\n\n"
        
        f"<b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        f"–ó–∞–≥—Ä—É–∑–∫–∞: {os.getloadavg()}\n"
        f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - datetime.fromtimestamp(psutil.boot_time())}"
    )

def get_top_processes():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            processes.append(proc.info)
        except:
            continue
    
    top_cpu = sorted(processes, key=lambda p: p['cpu_percent'], reverse=True)[:5]
    top_mem = sorted(processes, key=lambda p: p['memory_percent'], reverse=True)[:5]
    
    cpu_info = "\n".join([f"{p['name']}: {p['cpu_percent']}%" for p in top_cpu])
    mem_info = "\n".join([f"{p['name']}: {p['memory_percent']}%" for p in top_mem])
    
    return (
        f"üèÜ <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</b>\n\n"
        f"<b>–ü–æ CPU:</b>\n{cpu_info}\n\n"
        f"<b>–ü–æ –ø–∞–º—è—Ç–∏:</b>\n{mem_info}"
    )

def get_disk_info():
    result = ["üíΩ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö</b>\n"]
    for part in psutil.disk_partitions(all=False):
        usage = psutil.disk_usage(part.mountpoint)
        result.append(
            f"\nüìå <b>{part.device}</b> ({part.fstype})\n"
            f"–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {part.mountpoint}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage.percent}% ({usage.used/1024**3:.1f}GB/{usage.total/1024**3:.1f}GB)\n"
            f"–°–≤–æ–±–æ–¥–Ω–æ: {usage.free/1024**3:.1f}GB"
        )
    return "\n".join(result)

def get_network_info():
    net_io = psutil.net_io_counters()
    net_if = psutil.net_if_addrs()
    
    interfaces = []
    for name, addrs in net_if.items():
        for addr in addrs:
            if addr.family == socket.AF_INET:
                interfaces.append(f"üîπ {name}: {addr.address}")
    
    return (
        f"üåê <b>–°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:</b>\n" + "\n".join(interfaces) + "\n\n"
        f"<b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_io.bytes_sent/1024**2:.1f}MB\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ: {net_io.bytes_recv/1024**2:.1f}MB\n"
        f"–ü–∞–∫–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_io.packets_sent}\n"
        f"–ü–∞–∫–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω–æ: {net_io.packets_recv}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_short_status(), parse_mode='HTML')

async def fullstatus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_full_status(), parse_mode='HTML')

async def processes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_top_processes(), parse_mode='HTML')

async def disks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_disk_info(), parse_mode='HTML')

async def network(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_network_info(), parse_mode='HTML')

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ['—Å—Ç–∞—Ç—É—Å', 'status']:
        await status(update, context)

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("fullstatus", fullstatus))
    app.add_handler(CommandHandler("processes", processes))
    app.add_handler(CommandHandler("disks", disks))
    app.add_handler(CommandHandler("network", network))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    app.run_polling()

if __name__ == '__main__':
    main()
